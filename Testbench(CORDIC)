Testbench:
module fir_tb();
localparam CORDIC_CLK_PERIOD = 2; //500MHz Cordic sampling clock
localparam FIR_CLK_PERIOD = 10; //100Mhz FIR filter sampling clock
localparam signed [15:0] PI_POS = 16'h6498; //pi in fixed point
localparam signed [15:0] PI_NEG = 16'h9879; //-pi i fixed point
localparam PHASE_INC_2MHZ = 200; //phase jump for 2 MHz sine wave synthesis
localparam PHASE_INC_30MHZ = 3000; //phase jump for 30 MHz sine wave synthesis
reg cordic_clk = 1'b0;
reg fir_clk = 1'b0;
reg phase_tvalid = 1'b0;
reg signed [15:0] phase_2MHz = 0;
reg signed [15:0] phase_30MHz = 0;
wire sincos_2MHz_tvalid;
wire signed [15:0] sin_2MHz, cos_2MHz;
wire sincos_30MHz_tvalid;
wire signed [15:0] sin_30MHz, cos_30MHz;
reg signed [15:0] noisy_signal =0;
wire signed [15:0] filtered_signal;
cordic_0 cordic_inst_1 (.aclk(cordic_clk), .s_axis_phase_tvalid(phase_tvalid), .s_Axis_phase_tdata(phase_2MHz), 
.m_axis_dout_tvalid(sincos_2MHz_tvalid), .m_axis_dout_tdata({sin_2MHz,cos_2MHz}));
cordic_0 cordic_inst_2 (.aclk(cordic_clk), .s_axis_phase_tvalid(phase_tvalid), .s_Axis_phase_tdata(phase_30MHz), 
.m_axis_dout_tvalid(sincos_30MHz_tvalid), .m_axis_dout_tdata({sin_30MHz,cos_30MHz}));
always @(posedge cordic_clk) begin
phase_tvalid <=1'b1;
if(phase_2MHz + PHASE_INC_2MHZ < PI_POS) begin
phase_2MHz <= phase_2MHz + PHASE_INC_2MHZ;
end else begin
phase_2MHz <= PI_NEG + (phase_2MHz + PHASE_INC_2MHZ - PI_POS);
end
if(phase_30MHz + PHASE_INC_30MHZ <= PI_POS) begin
phase_30MHz <= phase_30MHz + PHASE_INC_30MHZ;
end else begin
phase_30MHz <= PI_NEG + (phase_30MHz +PHASE_INC_30MHZ - PI_POS);
end
end
always begin 
cordic_clk = #(CORDIC_CLK_PERIOD/2) ~ cordic_clk;
end
always begin
fir_clk = #(FIR_CLK_PERIOD/2) ~fir_clk;
end
always @(posedge fir_clk) begin
noisy_signal <= (sin_2MHz + sin_30MHz)/2;
end
FIR_9 fir_inst(.clk(fir_clk), .noisy_signal(noisy_signal), .filtered_signal(filtered_signal));
endmodule
