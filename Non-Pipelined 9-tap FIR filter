module FIR_9(
 input clk,
 input signed [15:0] noisy_signal,
 output reg signed [15:0] filtered_signal
);
 integer i;
 reg signed [15:0] coeff [0:8];
 reg signed [15:0] delayed_signal [0:8];
 reg signed [31:0] acc; // Moved outside the always block
 initial begin
 coeff[0] = 16'sh0039;
 coeff[1] = 16'h0A6;
 coeff[2] = 16'h03C2;
 coeff[3] = 16'h0E2D;
 coeff[4] = 16'h22AF;
 coeff[5] = 16'h1C13;
 coeff[6] = 16'h0E2D;
 coeff[7] = 16'h03C2;
 coeff[8] = 16'h00A6;
 end
 always @(posedge clk) begin
 // Shift delayed inputs
 for (i = 8; i > 0; i = i - 1) begin
 delayed_signal[i] <= delayed_signal[i-1];
 end
 delayed_signal[0] <= noisy_signal;
 // Multiply and accumulate
 acc = 0; // Reset accumulator each cycle
 for (i = 0; i < 9; i = i + 1) begin
 acc = acc + delayed_signal[i] * coeff[i];
 end
 filtered_signal <= acc[31:16]; // Bit truncation to fit output
 end
endmodule
